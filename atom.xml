<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[bing's blog]]></title>
  <subtitle><![CDATA[不积跬步，无以至千里]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-03-24T08:17:55.524Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[bing]]></name>
    <email><![CDATA[bing.wu566@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[自己动手写flv文件]]></title>
    <link href="http://yoursite.com/2015/03/23/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99flv%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2015/03/23/自己动手写flv文件/</id>
    <published>2015-03-23T11:24:28.000Z</published>
    <updated>2015-03-24T08:17:50.000Z</updated>
    <content type="html"><![CDATA[<p>项目需要使用ffmpeg来实现flv格式的编解码功能。ffmpeg对编解码大致分两部分来实现：数据编码和文件编码，直接调用相关api就可以实现。然而不够灵活，需要自己定制flv格式，于是就把文件编码这一部分自己来做，加入自己的东西。数据的编码直接使用ffmpeg的api。解码的时候根据由自己来分析格式，抽取纯音频数据，进行解码。</p>
<p>首先需要对flv的格式做一个了解，这块网上文章很多，也很详细。</p>
<pre><code>flv文件分为<span class="keyword">header</span>区和<span class="built_in">tag</span>区。<span class="keyword">header</span>区都是固定的<span class="number">9</span><span class="built_in">bytes</span>,接着是为了兼容格式的previous size <span class="number">4</span><span class="built_in">bytes</span>。后面就是<span class="built_in">tag</span>区。一般第一个<span class="built_in">tag</span>是标示为<span class="number">0x12</span>的脚本<span class="built_in">tag</span>，包含了一些音频信息，例如时长，文件大小等。也有的没有脚本<span class="built_in">tag</span>，那么播放器就会遍历文件寻找这些信息。web版flv由于编码过程不够规范，所以很多没有脚本<span class="built_in">tag</span>，自然得不到<span class="built_in">tag</span>信息，但是这个需求是听录音，mp3和flv一起播放，而mp3的长度是可以得到的；然而手机生成的录音就需要打上长度信息<span class="built_in">.</span>
</code></pre><p>header区和脚本tag可以先作为文件头写入flv文件，脚本tag可以根据自己的需求来定制。只要符合播放器的解码规则，不要视为错误文件就可以。</p>
<pre><code> 每个<span class="built_in">tag</span>分为<span class="keyword">header</span>和<span class="built_in">data</span>两个区。<span class="built_in">tag</span> <span class="keyword">header</span> 固定的是<span class="number">11</span>个字节，<span class="built_in">tag</span>类型(<span class="number">1</span>byte)、<span class="built_in">data</span>大小(<span class="number">3</span><span class="built_in">bytes</span>)、timestamp(<span class="number">3</span><span class="built_in">bytes</span>)、exTimestamp扩展时间戳，作为时间戳的高位(<span class="number">1</span>byte)和stramid(<span class="number">3</span><span class="built_in">bytes</span>恒为<span class="number">0</span>)<span class="built_in">.</span>。后面紧跟着是<span class="built_in">tag</span> <span class="built_in">data</span> ，开头<span class="number">1</span>byte标示 出该<span class="built_in">tag</span> <span class="built_in">data</span>的一些音频信息，例如编码类型、通道数等。在<span class="built_in">tag</span> <span class="built_in">data</span>后面还有一个<span class="number">4</span><span class="built_in">bytes</span>的区域表示该<span class="built_in">tag</span>的size。据此可以看出，每个<span class="built_in">tag</span>的size是不固定的，取决于<span class="built_in">tag</span> <span class="built_in">data</span>的大小。但是<span class="built_in">tag</span>的<span class="keyword">header</span>和<span class="built_in">data</span>第一个byte以及后面的previous的大小和值是固定的。除了<span class="keyword">header</span>中的<span class="built_in">data</span>大小、timestamp和previous size的值。
</code></pre><p>下面就是纯音频数据的编码了。我们的原始数据都是未经压缩的pcm数据，来源可以是声卡，也可以是文件和网络流。拿到的pcm数据，要先进行分割，确定一个包的大小。先找到所使用的编码器的压缩比是多少，这个一般是常数。在ffmpeg的decoder实例中可以找到。据此计算出编码后的数据的大小，为方便读取，尽量把包分割成相同大小。然后把这个值+1写进tagheader的datasize区，当然previoussize的大小也可以确定了。至于时间戳，知道采样率，那么也就很容易计算出来了。例如压缩比是8：1。原始数据512编码之后就是64，那么就65就是tagdata的大小，不要忘了前面的1byte的音频信息。</p>
<p>   要注意一点，在实际的编码中，可能会出现缓存不足导致丢包的现象，这时候会出现时间戳错误，导致不同步。</p>
<p>   本来打算按照脚本tag的标准格式写入信息，但是觉得太麻烦。所以tag头按照标准，内容就用4bytes存储samples。当然，前面最好加一个校验标志。反正是自己来读取。其他播放器无视就可以，只要脚本tag头的size写对就可以。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>项目需要使用ffmpeg来实现flv格式的编解码功能。ffmpeg对编解码大致分两部分来实现：数据编码和文件编码，直接调用相关api就可以实现。然而不够灵活，需要自己定制flv格式，于是就把文件编码这一部分自己来做，加入自己的东西。数据的编码直接使用ffmpeg的api。解]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建个人博客]]></title>
    <link href="http://yoursite.com/2015/03/18/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2015/03/18/搭建个人博客/</id>
    <published>2015-03-18T11:51:58.000Z</published>
    <updated>2015-03-20T09:53:53.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言">前言</h2>
<hr>
<p>之前在csdn上写过博文，觉得它的编辑框使用起来毫无沉浸感，可控性也很差。于是希望搭建独立的博客。<br>在网上搜索之后，确定使用hexo博客生成框架+github page免费空间的方式来创建博客系统。<br>很喜欢markdown的语法，配合mou编辑器，写起来很有沉浸感。简单记录一下搭建过程。</p>
<h2 id="配置环境">配置环境</h2>
<hr>
<p>hexo基于node.js，那么就先安装node.js。使用Homebrew安装:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew <span class="operator"><span class="keyword">install</span> node</span></div></pre></td></tr></table></figure>

<p>node自带npm,查看安装结果:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$:</span>node -v</div><div class="line">v<span class="number">0</span>.<span class="number">10.36</span></div><div class="line"><span class="variable">$:</span>npm -v</div><div class="line"><span class="number">2.6</span>.<span class="number">1</span></div></pre></td></tr></table></figure>

<h2 id="安装hexo">安装hexo</h2>
<p>使用npm安装：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$:</span>npm install hexo -g</div></pre></td></tr></table></figure>

<p>初始化，folder为指定的目录</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init <span class="tag">&lt;<span class="title">folder</span>&gt;</span></div></pre></td></tr></table></figure>

<p>进入folder目录内,生成静态文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> floder</div><div class="line">hexo generate/g</div></pre></td></tr></table></figure>

<p>本地启动预览</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo server</div><div class="line">info] Hexo is running <span class="keyword">at</span> <span class="keyword">http</span>://localhost:<span class="number">4000</span>/. Press Ctrl+C <span class="built_in">to</span> stop.</div></pre></td></tr></table></figure>

<p>在浏览器输入<a href="http://localhost:4000/即可看到博客的预览效果。" target="_blank" rel="external">http://localhost:4000/即可看到博客的预览效果。</a></p>
<h2 id="安装过程遇到的问题">安装过程遇到的问题</h2>
<h6 id="1、执行npm_install_hexo_-g后出现：">1、执行npm install hexo -g后出现：</h6>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> WARN locking <span class="attribute">Error</span>: EACCES, open <span class="string">'/Users/imac/.npm/_locks/</span></div><div class="line">hexo-89ff29e8d72588ea.lock.STALE'</div><div class="line"><span class="built_in">npm</span> WARN locking  <span class="regexp">/Users/imac/</span>.<span class="built_in">npm</span><span class="regexp">/_locks/hexo-89ff29e8d72588ea.lock failed { [Error: EACCES, open '/Users/imac/</span>.<span class="built_in">npm</span>/_locks/hexo-<span class="number">89</span>ff29e8d72588ea.lock.STALE<span class="string">']</span></div><div class="line">npm WARN locking   errno: 3,</div><div class="line">npm WARN locking   code: 'EACCES<span class="string">',</span></div><div class="line">npm WARN locking   path: '<span class="regexp">/Users/imac/</span>.<span class="built_in">npm</span>/_locks/hexo-<span class="number">89</span>ff29e8d72588ea.lock.STALE<span class="string">' }</span></div><div class="line">npm ERR! Darwin 14.0.0</div><div class="line">npm ERR! argv "node" "/usr/local/bin/npm" "install" "hexo@2.8.3" "-g"</div><div class="line">npm ERR! node v0.10.35</div><div class="line">npm ERR! npm  v2.1.18</div><div class="line"></div><div class="line">npm ERR! Attempt to unlock /usr/local/Cellar/node/0.10.35_2/libexec/npm/lib/node_modules/hexo, which hasn't been locked</div><div class="line"><span class="built_in">npm</span> ERR! </div><div class="line"><span class="built_in">npm</span> ERR! If you need help, you may report <span class="keyword">this</span> error <span class="attribute">at</span>:</div><div class="line"><span class="built_in">npm</span> ERR!     &lt;<span class="attribute">http</span>:<span class="regexp">//gi</span>thub.com/<span class="built_in">npm</span>/<span class="built_in">npm</span>/issues&gt;</div><div class="line"><span class="built_in">npm</span> ERR! Please include the following file <span class="reserved">with</span> any support <span class="attribute">request</span>:</div><div class="line"><span class="built_in">npm</span> ERR!     /Users/imac/<span class="built_in">npm</span>-debug.log</div></pre></td></tr></table></figure>

<p>原因是当前用户不具有.npm和/usr/local的使用权限,修改它们的拥有者:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$:</span>sudo <span class="keyword">chown</span> -R <span class="string">`whoami`</span> .npm</div><div class="line"><span class="variable">$:</span>sudo <span class="keyword">chown</span> -R <span class="string">`whoami`</span> .npm /usr/<span class="keyword">local</span>/</div></pre></td></tr></table></figure>

<p>参考:<a href="https://github.com/npm/npm/issues/4815" target="_blank" rel="external">https://github.com/npm/npm/issues/4815</a></p>
<h6 id="2、node_gyp_rebuild卡住">2、node_gyp rebuild卡住</h6>
<p>在初始化hexo时会卡到node_gyp rebuild过程,等待很久没有反应。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fsevents@<span class="number">0.2</span>.<span class="number">0</span> install <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>node<span class="regexp">/0.10.35_2/</span>libexec<span class="regexp">/npm/</span>lib<span class="regexp">/node_modules/</span>hexo<span class="regexp">/node_modules/</span>chokidar<span class="regexp">/node_modules/</span>fsevents node-gyp rebuild</div></pre></td></tr></table></figure>

<p>node_gyp的编译需要python和编译工具：</p>
<ul>
<li>python (v2.7 recommended, v3.x.x is not supported)</li>
<li>make</li>
<li>A proper C/C++ compiler toolchain, like GCC</li>
</ul>
<p>如果以上都已经安装则可能是 NodeJs 源码缺失的原因。<br>node-gyp 编译时候需要 NodeJs 源码来提供头文件，所以它会先尝试下载 NodeJs 源码，由于国外CDN的原因,有时候下载 NodeJs 非常慢的。<br>那么就自己用迅雷等下载工具下载对应版本的nodejs源码,然后提取给node_gyp.<br>切记对应的node版本号。我是直接查看本地安装的node版本号下载对应node源码。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># wget http://nodejs.org/dist/v0.10.33/node-v0.10.33.tar.gz</span></div><div class="line"><span class="preprocessor"># 假设源码已经下载好了.</span></div><div class="line">tar zxf node-v0<span class="number">.10</span><span class="number">.33</span>.tar.gz -C ~/.node-gyp</div><div class="line">mv ~/.node-gyp/node-v0<span class="number">.10</span><span class="number">.33</span> ~/.node-gyp/<span class="number">0.10</span><span class="number">.33</span></div><div class="line">printf <span class="string">"9\n"</span>&gt;~/.node-gyp/<span class="number">0.10</span><span class="number">.33</span>/installVersion</div></pre></td></tr></table></figure>

<p>注意，不同操作系统下和编译不同的 package 时候 node-gyp 需要的源码版本有可能是不一样的，installVersion 也有可能不一样。推荐先检查一下 node-gyp 的输出日志来确定下载哪一个文件。</p>
<p>另外还可以使用 npm install —loglevel verbose 查看安装时候的详细日志，来确定需要下载的 Nodejs 源码地址。<br>参考:<a href="https://breeswish.org/blog/2014/11/14/node-gyp-rebuild-freeze/" target="_blank" rel="external">https://breeswish.org/blog/2014/11/14/node-gyp-rebuild-freeze/</a></p>
<h6 id="3、3-0版本降级到2-8-3要做的">3、3.0版本降级到2.8.3要做的</h6>
<ul>
<li>备份source、_config.yml和themes文件夹。</li>
<li>卸载高版本插件，安装低版本插件</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">npm uninstall hexo-<span class="keyword">renderer</span>-ejs hexo-<span class="keyword">renderer</span>-marked hexo-<span class="keyword">renderer</span>-stylus</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">npm install hexo-<span class="keyword">renderer</span>-ejs<span class="variable">@0</span><span class="number">.1</span><span class="number">.0</span> hexo-<span class="keyword">renderer</span>-marked<span class="variable">@0</span><span class="number">.1</span><span class="number">.0</span> hexo-<span class="keyword">renderer</span>-stylus<span class="variable">@0</span><span class="number">.1</span><span class="number">.0</span> hexo-generator-feed<span class="variable">@0</span><span class="number">.2</span><span class="number">.1</span> hexo-generator-sitemap<span class="variable">@0</span><span class="number">.2</span><span class="number">.0</span></div></pre></td></tr></table></figure>

<p>参考:<a href="http://sandylaw.tk/2015/03/07/hexo3to2/" target="_blank" rel="external">http://sandylaw.tk/2015/03/07/hexo3to2/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<a id="more"></a>
<h2 id="前言">前言</h2>
<hr>
<p>之前在csdn上写过博文，觉得它的编辑框使用起来毫无沉浸感，可控性也很差。于是希望搭建独立的博客。<br>在网上搜索之后，确定使用hexo博客生成框架+github page免费空间的方式]]>
    </summary>
    
      <category term="标签" scheme="http://yoursite.com/tags/%E6%A0%87%E7%AD%BE/"/>
    
      <category term="工具方法" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
</feed>
